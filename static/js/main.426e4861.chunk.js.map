{"version":3,"sources":["api.js","passwordGenerator.js","constants.js","result.js","App.js","index.js"],"names":["requestBody","length","characters","replacement","jsonrpc","method","params","apiKey","process","n","id","getRandomString","a","axios","post","result","undefined","generatePassword","config","adjustedConfig","createPossibleCharacterString","createCharacterSettingArray","settings","filter","s","enabled","map","lowercase","uppercase","numbers","symbols","defaultForm","Result","useState","password","setPassword","isLoading","setIsLoading","form","setForm","formValid","setFormValid","useEffect","generate","generatedPassword","data","random","handleCheckChange","e","stateProp","target","checked","Form","onSubmit","preventDefault","Row","Group","as","Col","md","controlId","className","Label","Control","type","value","readOnly","focus","Check","custom","label","name","onChange","Text","min","max","Button","variant","disabled","Spinner","animation","size","role","aria-hidden","App","Container","Jumbotron","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.426e4861.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst URL = 'https://api.random.org/json-rpc/2/invoke';\r\n\r\nconst requestBody = (length, characters, replacement) => {\r\n\treturn {\r\n\t\tjsonrpc: '2.0',\r\n\t\tmethod: 'generateStrings',\r\n\t\tparams: {\r\n\t\t\tapiKey: process.env.REACT_APP_RANDOM_API_KEY,\r\n\t\t\tn: 1,\r\n\t\t\tlength,\r\n\t\t\tcharacters,\r\n\t\t\treplacement,\r\n\t\t},\r\n\t\tid: '24',\r\n\t};\r\n};\r\n\r\nexport const getRandomString = async ({ length, characters, replacement }) => {\r\n\tlet result;\r\n\ttry {\r\n\t\tresult = await axios.post(URL, requestBody(length, characters, replacement));\r\n\t} catch (error) {\r\n\t\tresult = undefined;\r\n\t}\r\n\treturn result;\r\n};\r\n","import { getRandomString } from './api';\r\nimport * as characterConstants from './constants';\r\n\r\nexport const generatePassword = async config => {\r\n\tconst adjustedConfig = {\r\n\t\tlength: config.length,\r\n\t\tcharacters: createPossibleCharacterString(\r\n\t\t\tcreateCharacterSettingArray(config),\r\n\t\t),\r\n\t\treplacement: config.replacement,\r\n    };\r\n    return await getRandomString(adjustedConfig);\r\n};\r\n\r\nconst createPossibleCharacterString = settings => {\r\n\tlet result = '';\r\n\tsettings.filter(s => s.enabled).map(s => (result += s.characters));\r\n\treturn result;\r\n};\r\n\r\nconst createCharacterSettingArray = ({\r\n\tlowercase,\r\n\tuppercase,\r\n\tnumbers,\r\n\tsymbols,\r\n}) => {\r\n\treturn [\r\n\t\t{\r\n\t\t\tenabled: lowercase,\r\n\t\t\tcharacters: characterConstants.LETTERS_LOWER,\r\n\t\t},\r\n\t\t{\r\n\t\t\tenabled: uppercase,\r\n\t\t\tcharacters: characterConstants.LETTERS_UPPER,\r\n\t\t},\r\n\t\t{\r\n\t\t\tenabled: numbers,\r\n\t\t\tcharacters: characterConstants.NUMBERS,\r\n\t\t},\r\n\t\t{\r\n\t\t\tenabled: symbols,\r\n\t\t\tcharacters: characterConstants.SYMBOLS,\r\n\t\t},\r\n\t];\r\n};\r\n","export const LETTERS_LOWER = 'abcdefghijklmnopqrstuvwxyz';\r\nexport const LETTERS_UPPER = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\nexport const NUMBERS = '0123456789';\r\nexport const SYMBOLS = '!#$%&*';","import React, { useState, useEffect } from 'react';\r\nimport { Button, Form, Col, Spinner } from 'react-bootstrap';\r\nimport { generatePassword } from './passwordGenerator';\r\n\r\nconst defaultForm = {\r\n\tlowercase: true,\r\n\tuppercase: false,\r\n\tnumbers: false,\r\n\tsymbols: false,\r\n\tlength: 6,\r\n\treplacement: true,\r\n};\r\n\r\nconst Result = () => {\r\n\tconst [password, setPassword] = useState('Choose options below...');\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\tconst [form, setForm] = useState(defaultForm);\r\n\tconst [formValid, setFormValid] = useState(true);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (form.lowercase || form.uppercase || form.numbers || form.symbols) {\r\n\t\t\tsetFormValid(true);\r\n\t\t} else {\r\n\t\t\tsetFormValid(false);\r\n\t\t}\r\n\t}, [form.lowercase, form.uppercase, form.numbers, form.symbols]);\r\n\r\n\tconst generate = async () => {\r\n\t\tsetIsLoading(true);\r\n\t\tlet generatedPassword = await generatePassword(form);\r\n\t\tsetPassword(generatedPassword.data.result.random.data[0]);\r\n\t\tsetIsLoading(false);\r\n\t};\r\n\r\n\tconst handleCheckChange = (e, stateProp) => {\r\n\t\tsetForm({\r\n\t\t\t...form,\r\n\t\t\t[stateProp]: e.target.checked,\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleRangeChange = e => {\r\n\t\tsetForm({\r\n\t\t\t...form,\r\n\t\t\tlength: e.target.value,\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\tif (formValid) {\r\n\t\t\tgenerate();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Form onSubmit={handleSubmit}>\r\n\t\t\t<Form.Row>\r\n\t\t\t\t<Form.Group as={Col} md=\"12\" controlId=\"formPassword\" className=\"font-weight-bold\">\r\n\t\t\t\t\t<Form.Label>Your password is:</Form.Label>\r\n\t\t\t\t\t<Form.Control type=\"text\" value={password} readOnly focus />\r\n\t\t\t\t</Form.Group>\r\n\t\t\t</Form.Row>\r\n\t\t\t<Form.Row>\r\n\t\t\t\t<Form.Group as={Col} controlId=\"formCharacters\">\r\n\t\t\t\t\t<Form.Label>\r\n\t\t\t\t\t\tWhat kind of characters would you like?\r\n\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t<Form.Check\r\n\t\t\t\t\t\tcustom\r\n\t\t\t\t\t\ttype=\"switch\"\r\n\t\t\t\t\t\tlabel=\"Lowercase letters\"\r\n\t\t\t\t\t\tname=\"lowercase\"\r\n\t\t\t\t\t\tid=\"lowercase\"\r\n\t\t\t\t\t\tchecked={form.lowercase}\r\n\t\t\t\t\t\tonChange={e => handleCheckChange(e, 'lowercase')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Form.Check\r\n\t\t\t\t\t\tcustom\r\n\t\t\t\t\t\ttype=\"switch\"\r\n\t\t\t\t\t\tlabel=\"Uppercase letters\"\r\n\t\t\t\t\t\tname=\"uppercase\"\r\n\t\t\t\t\t\tid=\"uppercase\"\r\n\t\t\t\t\t\tchecked={form.uppercase}\r\n\t\t\t\t\t\tonChange={e => handleCheckChange(e, 'uppercase')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Form.Check\r\n\t\t\t\t\t\tcustom\r\n\t\t\t\t\t\ttype=\"switch\"\r\n\t\t\t\t\t\tlabel=\"Numbers\"\r\n\t\t\t\t\t\tname=\"numbers\"\r\n\t\t\t\t\t\tid=\"numbers\"\r\n\t\t\t\t\t\tchecked={form.numbers}\r\n\t\t\t\t\t\tonChange={e => handleCheckChange(e, 'numbers')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Form.Check\r\n\t\t\t\t\t\tcustom\r\n\t\t\t\t\t\ttype=\"switch\"\r\n\t\t\t\t\t\tlabel=\"Symbols\"\r\n\t\t\t\t\t\tname=\"symbols\"\r\n\t\t\t\t\t\tid=\"symbols\"\r\n\t\t\t\t\t\tchecked={form.symbols}\r\n\t\t\t\t\t\tonChange={e => handleCheckChange(e, 'symbols')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{formValid ? (\r\n\t\t\t\t\t\t''\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Form.Text className=\"text-danger\">\r\n\t\t\t\t\t\t\tPlease choose at least one character type\r\n\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<Form.Check\r\n\t\t\t\t\t\tcustom\r\n\t\t\t\t\t\ttype=\"switch\"\r\n\t\t\t\t\t\tlabel=\"Repeating characters allowed\"\r\n\t\t\t\t\t\tname=\"replacement\"\r\n\t\t\t\t\t\tid=\"replacement\"\r\n\t\t\t\t\t\tchecked={form.replacement}\r\n\t\t\t\t\t\tonChange={e => handleCheckChange(e, 'replacement')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Form.Group>\r\n\t\t\t\t<Form.Group as={Col} controlId=\"formLength\">\r\n\t\t\t\t\t<Form.Label>\r\n\t\t\t\t\t\tHow long would you like the password to be?\r\n\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\tcustom\r\n\t\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\t\tmin=\"5\"\r\n\t\t\t\t\t\tmax=\"20\"\r\n\t\t\t\t\t\tvalue={form.length}\r\n\t\t\t\t\t\tonChange={handleRangeChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t{form.length} characters long\r\n\t\t\t\t\t</Form.Text>\r\n\t\t\t\t</Form.Group>\r\n\t\t\t</Form.Row>\r\n\t\t\t<Form.Row>\r\n\t\t\t\t<Button type=\"submit\" variant=\"success\" disabled={isLoading} className=\"mx-auto\">\r\n\t\t\t\t\tGenerate{' '}\r\n\t\t\t\t\t{isLoading ? (\r\n\t\t\t\t\t\t<Spinner\r\n\t\t\t\t\t\t\tas=\"span\"\r\n\t\t\t\t\t\t\tanimation=\"border\"\r\n\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\trole=\"status\"\r\n\t\t\t\t\t\t\taria-hidden=\"true\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t''\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Button>\r\n\t\t\t</Form.Row>\r\n\t\t</Form>\r\n\t);\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react';\nimport { Container, Jumbotron } from 'react-bootstrap';\nimport Result from './result';\n\nfunction App() {\n\treturn (\n\t\t<Container>\n\t\t\t<Jumbotron className=\"mt-2\">\n\t\t\t\t<h1>Super Secret Password Generator</h1>\n\t\t\t\t<p>Fill out the simple form below to generate something a little better than password123</p>\n\t\t\t</Jumbotron>\n\t\t\t<Result />\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}